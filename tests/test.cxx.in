
#include <cassert>
#include <cstring>
#include <fstream>
#include <iostream>

#include "${testFileHeader}"

namespace {
    static constexpr const char file_path[] = "${testFilePath}";
}

static int main0(int, char **) {

    std::ifstream input(file_path, std::ios::binary);
    if (!input) { std::cout << "failed to open target file: " << file_path << std::endl; return -1; }
    input.exceptions(std::ios_base::badbit);

    constexpr long long buffer_size = 256;
    unsigned char buffer[buffer_size];

    unsigned long long length = 0;

    auto readData = [&] () -> std::streamsize {
        std::streamsize bufPos = 0;
        while (bufPos < buffer_size && !input.eof()) {
            input.read((char *)buffer, buffer_size - bufPos);
            if (!input.eof() && input.fail()) { throw std::runtime_error("failed to read target file"); }
            std::streamsize count = input.gcount();
            if (count == 0) { break; }
            bufPos += count;
            length += count;
        }
        return bufPos; // data count available
    };
    
    for (std::streamsize i = readData(), lastLength = 0; i != 0; lastLength = length, i = readData()) {
        assert(std::memcmp(buffer, ${testFileDataIdentifier} + lastLength, i) == 0);
    }
    assert(length == ${testFileLengthIdentifier});

    return 0;
}

int main(int argc, char ** argv) {
    try {
        return main0(argc, argv);
    } catch (std::exception & ex) {
        std::cout << "uncaught exception" << std::endl;
        std::cout << ex.what() << std::endl;
    } catch (...) {
        std::cout << "uncaught unknown exception" << std::endl;
    }
    return -1;
}
